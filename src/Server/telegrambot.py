
import asyncio
import logging
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import pytz
from datetime import datetime
import os
from dotenv import load_dotenv
import re

load_dotenv()

logging.basicConfig(level=logging.INFO)
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

CHAT_ID = None
last_sent_notifications = set()  # –•—Ä–∞–Ω–∏—Ç ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="/start"), KeyboardButton(text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
], resize_keyboard=True)


@dp.message(Command("start"))
async def start(message: Message):
    global CHAT_ID
    CHAT_ID = message.chat.id
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=keyboard)
    logging.info(f"CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {CHAT_ID}")


@dp.message(lambda message: message.text == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
@dp.message(Command("notifications"))
async def manual_check(message: Message):
    notifications = await fetch_notifications()
    if notifications:
        for notification in notifications:
            await bot.send_message(CHAT_ID, format_notification(notification))
    else:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")


async def fetch_notifications():
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:3000/api/notifications")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    return data
                else:
                    return [data]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    return []

def format_notification(notification):
    id_ = notification.get("id", "‚Äî")
    name = notification.get("name", "‚Äî")
    phone = notification.get("phone", "‚Äî")
    email = notification.get("email", "‚Äî")
    description = notification.get("description", "‚Äî")
    is_read = "–î–∞" if notification.get("isRead") else "–ù–µ—Ç"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    created_at_raw = notification.get("createdAt", "‚Äî")
    try:
        created_at = datetime.fromisoformat(created_at_raw.replace("Z", "+00:00"))
        created_at = created_at.astimezone(pytz.timezone("Europe/Moscow"))  
        formatted_date = created_at.strftime("%d.%m.%Y %H:%M")  # –ü—Ä–∏–º–µ—Ä: 18.02.2025 17:16
    except Exception:
        formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
    if description and "–ù–û–í–´–ô –ó–ê–ö–ê–ó" in description:
        total_match = re.search(r'‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ([\d\s]+) ‚ÇΩ', description)
        total_amount = total_match.group(1) if total_match else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        address_match = re.search(r'‚Ä¢ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ([^\n]+)', description)
        address = address_match.group(1) if address_match else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        customer_name_match = re.search(r'‚Ä¢ –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: ([^\n]+)', description)
        customer_name = customer_name_match.group(1) if customer_name_match else name
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        items_section = description.split("====== –ó–ê–ö–ê–ó–ê–ù–ù–´–ï –¢–û–í–ê–†–´ ======")[1].split("======")[0] if "====== –ó–ê–ö–ê–ó–ê–ù–ù–´–ï –¢–û–í–ê–†–´ ======" in description else ""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
        return (
            f"üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó\n\n"
            f"–ó–∞–∫–∞–∑—á–∏–∫: {customer_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"Email: {email}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n\n"
            f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount} ‚ÇΩ\n\n"
            f"–î–∞—Ç–∞: {formatted_date}\n\n"
            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            f"ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {id_}"
        )
    else:
        # –û–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        return (
            f"üìå –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
            f"–ò–º—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"Email: {email}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {is_read}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {formatted_date}"
        )


async def poll_notifications():
    global CHAT_ID, last_sent_notifications
    while True:
        await asyncio.sleep(5)
        if CHAT_ID is None:
            logging.warning("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            continue

        notifications = await fetch_notifications()

        new_notifications = []
        for notification in notifications:
            notif_id = notification.get("id", str(notification))
            if notif_id not in last_sent_notifications:
                new_notifications.append(notification)
                last_sent_notifications.add(notif_id)

        if new_notifications:
            for notification in new_notifications:
                await bot.send_message(CHAT_ID, format_notification(notification))


async def main():
    loop = asyncio.get_event_loop()
    loop.create_task(poll_notifications())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
